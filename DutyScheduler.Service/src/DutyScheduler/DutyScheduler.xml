<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DutyScheduler</name>
    </assembly>
    <members>
        <member name="M:DutyScheduler.Controllers.CalendarController.Get">
            <summary>
            Gets the calendar for the current month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.CalendarController.Get(System.Int32,System.Int32)">
            <summary>
            Gets the calendar for the specified month and year.
            </summary>
            <param name="year">Year part of date</param>
            <param name="month">Month part of date</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.PreferenceController.Post(DutyScheduler.ViewModels.CreatePreferenceViewModel)">
            <summary>
            Create user's preference for the specified date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.PreferenceController.Put(DutyScheduler.ViewModels.CreateOrUpdatePreferenceViewModel)">
            <summary>
            Create or update user's preference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.PreferenceController.Put(System.Int32,DutyScheduler.ViewModels.UpdatePreferenceViewModel)">
            <summary>
            Update user's preference specified by <paramref name="id"/>.
            </summary>
            <param name="id">Preference id</param>
            <param name="model">Preference</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.PreferenceController.Delete(System.Int32)">
            <summary>
            Delete user's preference specified by <paramref name="id"/>
            </summary>
            <param name="id">Preference id</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ReplacementController.Post(DutyScheduler.ViewModels.RequestReplacementViewModel)">
            <summary>
            Request replacement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ReplacementController.Accept(DutyScheduler.ViewModels.AcceptReplacementRequestViewModel)">
            <summary>
            Accept replacement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ReplacementController.Delete(System.Int32)">
            <summary>
            Delete replacement request specified by <paramref name="request"/>
            </summary>
            <param name="request">request id</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ReplacementController.Get(System.Int32)">
            <summary>
            Get replacement request specified by <paramref name="request"/>
            </summary>
            <param name="request">request id</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ReplacementController.Get(System.String,System.Int32)">
            <summary>
            Get <paramref name="user"/>'s replacement requests for <paramref name="shift"/>.
            </summary>
            <param name="user">Username</param>
            <param name="shift">Shift id</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.SessionController.Logout">
            <summary>
            Logout.
            </summary>
            <returns>>HTTP status code indicating outcome of the operation.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.SessionController.Get">
            <summary>
            Get logged in user
            </summary>
            <returns>User object.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.SessionController.Login(DutyScheduler.ViewModels.LoginViewModel)">
            <summary>
            Login either using the username and password or email and password combination.
            </summary>
            <param name="viewModel">User to login.</param>
            <returns>>HTTP status code and message indicating outcome of the operation.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ShiftController.Post(DutyScheduler.ViewModels.ShiftViewModel)">
            <summary>
            Create a new shift.
            </summary>
            <param name="model">Shift model</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ShiftController.Put(System.Int32,DutyScheduler.ViewModels.SetReplacementViewModel)">
            <summary>
            Set whether the shift specified by <paramref name="id"/> is repleceable.
            </summary>
            <param name="id">Id of the shift</param>
            <param name="model">Model</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ShiftController.Get(System.Int32)">
            <summary>
            Get replacement requests for the shift specified by <paramref name="id"/>.
            </summary>
            <param name="id">Id of the shift</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ShiftController.GetCurrentShifts(System.String)">
            <summary>
            Get current month's shifts for user specified by <paramref name="username"/>.
            </summary>
            <param name="username">Username</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.ShiftController.GetShifts(System.String,System.Int32,System.Int32)">
            <summary>
            Get shifts for user specified by <paramref name="username"/> and <paramref name="month"/>.
            </summary>
            <param name="username">Username</param>
            <param name="month">Month</param>
            <param name="year">Year</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.StatistcsController.Get">
            <summary>
            Get statistics for logged in user and and current year.
            </summary>
        </member>
        <member name="M:DutyScheduler.Controllers.StatistcsController.Get(System.String)">
            <summary>
            Get statistics for <paramref name="username]]"/> and current year.
            </summary>
            <param name="username">Username</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.StatistcsController.Get(System.Int32)">
            <summary>
            Get statistics for logged in user and <paramref name="year"/>.
            </summary>
            <param name="year">Year</param>
            <returns></returns>
        </member>
        <member name="M:DutyScheduler.Controllers.StatistcsController.Get(System.String,System.Int32)">
            <summary>
            Get statistics for <paramref name="username]]"/> and <paramref name="year"/>.
            </summary>
            <param name="username">Username</param>
            <param name="year">Year</param>
            <returns></returns>
        </member>
        <member name="T:DutyScheduler.Controllers.UserController">
            <summary>
            User resource.
            </summary>
        </member>
        <member name="M:DutyScheduler.Controllers.UserController.Get(System.String)">
            <summary>
            Get user with the specified <paramref name="username"/>.
            </summary>
            <param name="username">Unique identifier of the user.</param>
            <returns>JSON user data.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.UserController.Get">
            <summary>
            Get all users.
            </summary>
            <returns>Users.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.UserController.Create(DutyScheduler.ViewModels.RegisterViewModel)">
            <summary>
            Register.
            </summary>
            <param name="viewModel">User profile to be created.</param>
            <returns>New user JSON data.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.UserController.Update(System.String,DutyScheduler.ViewModels.UpdateUserViewModel)">
            <summary>
            Update user with the specified <paramref name="username"/>.
            </summary>
            <param name="username">Unique identifier of the user.</param>
            <param name="viewModel">New user data.</param>
            <returns>JSON user data.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.UserController.AdminRights(System.String,DutyScheduler.ViewModels.AdminRightsViewModel)">
            <summary>
            Admin can grant or revoke admin rigts from user with the specified <paramref name="username"/>.
            </summary>
            <param name="username">Unique identifier of the user.</param>
            <param name="viewModel">Updated user data.</param>
            <returns>JSON user data.</returns>
        </member>
        <member name="M:DutyScheduler.Controllers.UserController.Delete(System.String)">
            <summary>
            Admin can delete user with the specified <paramref name="username"/>.
            </summary>
            <param name="username">Unique identifier of the user.</param>
            <returns>HTTP status code indicating outcome of the delete operation.</returns>
        </member>
        <member name="M:DutyScheduler.Services.AuthMessageSender.#ctor(Microsoft.Extensions.Options.IOptions{DutyScheduler.Services.SmtpClientConfiguration})">
            <summary>
            Could be used for details e-mail errors logging.
            </summary>
        </member>
        <member name="T:JayMuntzCom.HolidayCalculator">
            <summary>
            Summary description for HolidayCalculator.
            </summary>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.#ctor(System.DateTime,System.String)">
            <summary>
            Returns all of the holidays occuring in the year following the date that is passed in the constructor.  Holidays are defined in an XML file.
            </summary>	
            <param name="startDate">The starting date for returning holidays.  All holidays for one year after this date are returned.</param>
            <param name="xmlPath">The path to the XML file that contains the holiday definitions.</param>
        </member>
        <member name="P:JayMuntzCom.HolidayCalculator.OrderedHolidays">
            <summary>
            The holidays occuring after StartDate listed in chronological order;
            </summary>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.processXML">
            <summary>
            Loops through the holidays defined in the XML configuration file, and adds the next occurance into the OrderHolidays collection if it occurs within one year.
            </summary>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.processNode(System.Xml.XmlNode)">
            <summary>
            Processes a Holiday node from the XML configuration file.
            </summary>
            <param name="n">The Holdiay node to process.</param>
            <returns></returns>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.easter">
            <summary>
            Determines the next occurance of Easter (western Christian).
            </summary>
            <returns></returns>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.easter(System.Int32)">
            <summary>
            Determines the occurance of Easter in the given year.  If the result comes before StartDate, recalculates for the following year.
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.getDateByWeekdayOnOrAfter(System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Gets the next occurance of a weekday after a given month and day in the year after StartDate.
            </summary>
            <param name="weekday">The day of the week (0=Sunday).</param>
            <param name="m">The Month</param>
            <param name="d">Day</param>
            <returns></returns>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.getDateByMonthWeekWeekday(System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Gets the n'th instance of a day-of-week in the given month after StartDate
            </summary>
            <param name="month">The month the Holiday falls on.</param>
            <param name="week">The instance of weekday that the Holiday falls on (5=last instance in the month).</param>
            <param name="weekday">The day of the week that the Holiday falls on.</param>
            <returns></returns>
        </member>
        <member name="M:JayMuntzCom.HolidayCalculator.getFirstDayOfMonth(System.DateTime)">
            <summary>
            Returns the first day of the month for the specified date.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
    </members>
</doc>
